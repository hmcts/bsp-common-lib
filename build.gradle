buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.29.0'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library'
    id 'maven-publish'
    id 'net.ltgt.apt' version '0.21'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
}

apply plugin: 'org.springframework.boot'

group 'uk.gov.hmcts.reform'
version '0.0.47'

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

checkstyle.toolVersion = '8.32'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    jcenter()
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

def gitRepo = "https://github.com/hmcts/bsp-common-lib"

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/bsp-common-lib"
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId 'bsp-common-lib'
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Bulk Scanning common lib')
                root.appendNode('name', 'Bulk Scanning common lib')
                root.appendNode('url', gitRepo)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    //Run command with -PshouldPublish=false for checking whether version already exists
    boolean shouldPublish = "false" != findProperty('shouldPublish')
    publish = shouldPublish
    if (!shouldPublish) {
        println 'Will not publish artifact. Just check.'
    }

    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Main']
    pkg {
        repo = 'hmcts-maven'
        name = 'bsp-common-lib'
        userOrg = 'hmcts'
        licenses = ['MIT']
        vcsUrl = gitRepo
        version {
            name = project.version
        }
    }
}

def versions = [
        commonsLang3         : '3.11',
        junit                : '4.13',
        lombokVersion        : '1.16.18',
        mockito              : '3.4.4',
        serviceTokenGenerator: '3.0.0',
        springfoxSwagger     : '2.9.2'
]

dependencies {
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombokVersion
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testImplementation group: 'junit', name: 'junit', version: versions.junit
    testImplementation group: 'org.mockito', name: 'mockito-core', version: versions.mockito
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}
